    #MODIFIED function for getting the image from the database, should be faster than the original
    def request_image(self, zoom: int, x: int, y: int, db_cursor=None) -> ImageTk.PhotoImage:

        # Check if the tile image is in the cache
         cache_key = f"{zoom}{x}{y}"
         if cache_key in self.tile_image_cache:
             return self.tile_image_cache[cache_key]

         # If database is available, check if the tile is in the database
         if db_cursor is not None:
             try:
                 db_cursor.execute(
                     "SELECT t.tile_image FROM tiles t WHERE t.zoom=? AND t.x=? AND t.y=? AND t.server=?;",
                     (zoom, x, y, self.tile_server)
                 )
                 result = db_cursor.fetchone()

                 if result is not None:
                     image = Image.open(io.BytesIO(result[0]))
                     image_tk = ImageTk.PhotoImage(image)
                     self.tile_image_cache[cache_key] = image_tk
                     return image_tk

                 elif self.use_database_only:
                     self.tile_image_cache[cache_key] = self.empty_tile_image
                     return self.empty_tile_image

             except sqlite3.OperationalError:
                 if self.use_database_only:
                     self.tile_image_cache[cache_key] = self.empty_tile_image
                     return self.empty_tile_image

             except Exception:
                 pass
             
         # Try to get the tile from the server
         try:
             url = self.tile_server.replace("{x}", str(x)).replace("{y}", str(y)).replace("{z}", str(zoom))
             response = requests.get(url, stream=True, headers={"User-Agent": "TkinterMapView"})
             response.raise_for_status()

             image = Image.open(io.BytesIO(response.content))

             if self.overlay_tile_server is not None:
                 overlay_url = self.overlay_tile_server.replace("{x}", str(x)).replace("{y}", str(y)).replace("{z}", str(zoom))
                 overlay_response = requests.get(overlay_url, stream=True, headers={"User-Agent": "TkinterMapView"})
                 overlay_response.raise_for_status()

                 image_overlay = Image.open(io.BytesIO(overlay_response.content))
                 image = image.convert("RGBA")
                 image_overlay = image_overlay.convert("RGBA")

                 if image_overlay.size != (self.tile_size, self.tile_size):
                     image_overlay = image_overlay.resize((self.tile_size, self.tile_size), Image.ANTIALIAS)

                 image.paste(image_overlay, (0, 0), image_overlay)

             if self.running:
                 image_tk = ImageTk.PhotoImage(image)
                 self.tile_image_cache[cache_key] = image_tk
                 return image_tk

         except (PIL.UnidentifiedImageError, requests.exceptions.RequestException):
             pass
         
         self.tile_image_cache[cache_key] = self.empty_tile_image
         return self.empty_tile_image
